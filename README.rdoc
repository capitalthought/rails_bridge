= Rails Bridge

* http://github.com/capitalthought/rails_bridge

== DESCRIPTION

Easy embedding of remote content into your Rails app.

== SYNOPSIS

RailsBridge has two components

* RailsBridge::ContentBridge - Allows for easy embedding of content from a remote server directly into the HTML, XML, or Javascript returned by your Rails application.  The remote server may be an external application, a web service, or any other resource available via HTTP on the network.  
* RailsBridge::LayoutBridge - Allows easy exporting of your Rails HTML layouts as templates for other applications.

== INSTALLATION

rails_bridge is installed as a Ruby gem.  

  gem install rails_bridge

Include the gem in your Gemfile.

  gem 'rails_bridge'

== USING CONTENT BRIDGE

=== Declaring remote requests

Access to remote content sources is defined by creating "content requests".

  RailsBridge::ContentBridge.content_request( :my_request ) do |request|
    request.protocol = 'http'  # can be 'http' or 'https'.  'http' is the default
    request.host = "server.com"
    request.port = 8080 # default is 80
    request.path = "/some/path"
    request.params = {:param1=>'a value', :param2=>'another value'}
    request.default_content = "Content unavailable at this time."
    request.request_timeout = 1000 # miliseconds
  end
  
Requests are executed using the automatically generated class method:

  content = RailsBridge::ContentBridge.get_my_request
  
This issues an HTTP GET to "http://server.com:8080/some/path?param1=a%20value&param2=another%20value" and returns the content.  If the server is unavailable or the request times out, the default content is returned instead.

You can also simply use the url method to define the protocol, host, port, and path values of a request:

  RailsBridge::ContentBridge.content_request( :my_request ) do |request|
    request.url = "http://server.com:8080/some/path"
    request.params = {:param1=>'a value', :param2=>'another value'}
    request.default_content = "Content unavailable at this time."
    request.request_timeout = 1000 # miliseconds
  end
  
=== Caching

Content can be automatically cached by specifying a cache timeout for the request.

  RailsBridge::ContentBridge.content_request( :my_request ) do |request|
    request.url = "http://server.com:8080/some/path"
    request.params = {:param1=>'a value', :param2=>'another value'}
    request.default_content = "Content unavailable at this time."
    request.request_timeout = 1000 # miliseconds
    request.cache_timeout = 3600 # seconds
  end
    
  content = RailsBridge::ContentBridge.get_my_request

The content returned from first request will be cached for 3600 seconds.  Subsequent requests issued during that time will return the cached content.  

To explicitly skip the cache, override the cache_timeout with a value of 0.  This will also remove any entry in the cache for this request.

  content = RailsBridge::ContentBridge.get_my_request( :cache_timeout=>0 )

The cache key is derived from the complete URL of the request, including query params, so each request with a unique URL is cached independently.

When RailsBridge is loaded in a Rails application, the configured Rails cache is used by default.  When loaded outside Rails, ActiveSupport::Cache::MemoryStore is used by default.

=== One-line requests

If desired, all of the above functionality can be achieved in one line:

  content = RailsBridge::ContentBridge.get_remote_content("http://server.com:8080/some/path?param1=a%20value&param2=another%20value", {:cache_timeout=>3600, :default_content=>"Content Unavailable", :request_timeout=>1000} )

=== Setting defaults for a group of requests.

Default values can be set for a group of requests by sub-classing RailsBridge::ContentBridge and declaring them on the class:

  class TwitterStatusCacher < RailsBridge::ContentBridge
    self.request_timeout = 500    # miliseconds
    self.cache_timeout   = 60     # seconds
    self.host            = 'api.twitter.com'
    self.path            = '/statuses/user_timeline.json'
    self.on_success {|content| JSON.parse(content)}
    
    content_request( :hoonpark ) {|r| r.params = {:screen_name => 'hoonpark'}}
    content_request( :soopa ) {|r| r.params = {:screen_name => 'soopa'}}
  end
  
  soopa_latest_tweet = TwitterStatusCacher.get_soopa.first
  hoonpark_latest_tweet = TwitterStatusCacher.get_hoonpark.first
  

=== Setting global defaults

Global default values can be set directly on the RailsBridge::ContentBridge class.  They are used by all inheriting sub-classes unless overridden by the sub-class.

  RailsBridge::ContentBridge.logger = Logger.new(STDOUT)
  RailsBridge::ContentBridge.cache = ActiveSupport::Cache::MemCacheStore(:compress => true)
  RailsBridge::ContentBridge.cache_timeout = 5.minutes
  RailsBridge::ContentBridge.request_timeout = 500 # miliseconds
  

== TODO


== DEVELOPMENT

RailsBridge was developed and tested using Ruby v1.9.2 and Rails v3.0.3.  It uses the Typhoeus gem to handle all HTTP requests.  

You may download the source from Github at http://github.com/capitalthought/rails_bridge.  

You can start an IRB session with the RailsBridge code loaded and initialized by running:

  script/console
  

=== TESTS

RSpec 2.x is used for the Rails Bridge test suite.  To run the suite:

  rake
  
or
  rake spec
  
NOTE: The test suite has an additional dependency on the eventmachine gem to to implement the test HTTP server.

=== LICENSE:

  Copyright 2010 Capital Thought, LLC

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use any part of this software or its source code except 
  in compliance with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.